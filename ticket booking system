{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMAE0WRisgLj2DahCjqdTcm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dinke22-2/Ticket-Booking-System/blob/main/ticket%20booking%20system\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1FJrW-VYtylu",
        "outputId": "c71bdf76-cf31-4e34-9a12-5a71a53e474a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ticket Single-Day Pass purchased successfully!\n",
            "[<__main__.Ticket object at 0x79c037fb66b0>]\n",
            "System loaded successfully!\n"
          ]
        }
      ],
      "source": [
        "import pickle\n",
        "from tkinter import Tk, Label, Button, Entry, messagebox, Listbox\n",
        "\n",
        "# User Class\n",
        "class User:\n",
        "    def __init__(self, user_id, name, email, password):\n",
        "        self.user_id = user_id\n",
        "        self.name = name\n",
        "        self.email = email\n",
        "        self.password = password\n",
        "        self.purchase_history = []\n",
        "\n",
        "    def view_purchase_history(self):\n",
        "        return self.purchase_history\n",
        "\n",
        "    def add_to_purchase_history(self, ticket):\n",
        "        self.purchase_history.append(ticket)\n",
        "\n",
        "# Admin Class\n",
        "class Admin:\n",
        "    def __init__(self, admin_id, name, email, password):\n",
        "        self.admin_id = admin_id\n",
        "        self.name = name\n",
        "        self.email = email\n",
        "        self.password = password\n",
        "\n",
        "    def modify_discounts(self, ticket, new_discount):\n",
        "        ticket.discount = new_discount\n",
        "\n",
        "# Ticket Class\n",
        "class Ticket:\n",
        "    def __init__(self, ticket_id, ticket_type, price, validity, discount=0, limitations=None):\n",
        "        self.ticket_id = ticket_id\n",
        "        self.ticket_type = ticket_type\n",
        "        self.price = price\n",
        "        self.validity = validity\n",
        "        self.discount = discount\n",
        "        self.limitations = limitations\n",
        "\n",
        "    def calculate_discounted_price(self):\n",
        "        return self.price - (self.price * (self.discount / 100))\n",
        "\n",
        "# BookingSystem Class\n",
        "class BookingSystem:\n",
        "    def __init__(self):\n",
        "        self.users = []\n",
        "        self.admins = []\n",
        "        self.tickets = []\n",
        "        self.sales_data = []\n",
        "\n",
        "    def add_user(self, user):\n",
        "        self.users.append(user)\n",
        "\n",
        "    def add_ticket(self, ticket):\n",
        "        self.tickets.append(ticket)\n",
        "\n",
        "    def purchase_ticket(self, user, ticket_id):\n",
        "        ticket = next((t for t in self.tickets if t.ticket_id == ticket_id), None)\n",
        "        if ticket:\n",
        "            user.add_to_purchase_history(ticket)\n",
        "            self.sales_data.append(ticket)\n",
        "            return f\"Ticket {ticket.ticket_type} purchased successfully!\"\n",
        "        return \"Ticket not found.\"\n",
        "\n",
        "    def save_to_file(self, filename):\n",
        "        with open(filename, 'wb') as file:\n",
        "            pickle.dump(self, file)\n",
        "\n",
        "    def load_from_file(self, filename):\n",
        "        with open(filename, 'rb') as file:\n",
        "            return pickle.load(file)\n",
        "\n",
        "# Test Cases\n",
        "def test_booking_system():\n",
        "    system = BookingSystem()\n",
        "\n",
        "    # Create users and admins\n",
        "    user1 = User(1, \"Alice\", \"alice@example.com\", \"password123\")\n",
        "    admin1 = Admin(1, \"Admin\", \"admin@example.com\", \"adminpass\")\n",
        "\n",
        "    # Add users and admins to the system\n",
        "    system.add_user(user1)\n",
        "\n",
        "    # Create tickets\n",
        "    ticket1 = Ticket(1, \"Single-Day Pass\", 275, \"1 Day\")\n",
        "    ticket2 = Ticket(2, \"Two-Day Pass\", 480, \"2 Days\", discount=10)\n",
        "\n",
        "    # Add tickets to the system\n",
        "    system.add_ticket(ticket1)\n",
        "    system.add_ticket(ticket2)\n",
        "\n",
        "    # Purchase ticket\n",
        "    print(system.purchase_ticket(user1, 1))  # Purchase Single-Day Pass\n",
        "    print(user1.view_purchase_history())    # View purchase history\n",
        "\n",
        "    # Save system state to file\n",
        "    system.save_to_file(\"booking_system.pkl\")\n",
        "\n",
        "    # Load system state from file\n",
        "    loaded_system = BookingSystem().load_from_file(\"booking_system.pkl\")\n",
        "    print(\"System loaded successfully!\")\n",
        "\n",
        "test_booking_system()\n"
      ]
    }
  ]
}